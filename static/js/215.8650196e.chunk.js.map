{"version":3,"file":"static/js/215.8650196e.chunk.js","mappings":"iLAkBA,MAiKMA,EAAS,CACbC,YAAa,CACXC,gBAAiB,UACjBC,UAAW,QACXC,QAAS,QAEXC,UAAW,CACTC,QAAS,OACTC,OAAQ,qBACRC,aAAc,OACdC,SAAU,SACVC,UAAW,6BACXR,gBAAiB,UACjBS,UAAW,QAEbC,QAAS,CACPC,MAAO,MACPC,YAAa,iBACbZ,gBAAiB,UACjBa,UAAW,QAEbC,cAAe,CACbC,OAAQ,EACRb,QAAS,OACTc,aAAc,iBACdC,SAAU,OACVjB,gBAAiB,UACjBkB,MAAO,WAETC,QAAS,CACPjB,QAAS,YACTkB,OAAQ,UACRJ,aAAc,iBACdE,MAAO,WAETG,QAAS,CACPV,MAAO,MACPP,QAAS,OACTkB,cAAe,SACftB,gBAAiB,WAEnBuB,WAAY,CACVrB,QAAS,OACTF,gBAAiB,UACjBgB,aAAc,iBACdE,MAAO,UACPM,WAAY,OAEdC,SAAU,CACRC,KAAM,EACNxB,QAAS,OACTW,UAAW,OACXT,QAAS,OACTkB,cAAe,SACfK,IAAK,QAEPC,cAAe,CACbC,SAAU,MACV3B,QAAS,OACTI,aAAc,OACdE,UAAW,6BAEbsB,YAAa,CACXf,OAAQ,EACRG,MAAO,QAETa,YAAa,CACX3B,QAAS,OACT4B,eAAgB,WAChBC,WAAY,SACZN,IAAK,MACLlB,UAAW,MACXQ,SAAU,OACVC,MAAO,QAETgB,SAAU,CAAEV,WAAY,OACxBW,SAAU,CAAC,EACXC,WAAY,CAAEnB,SAAU,QACxBoB,UAAW,CACTjC,QAAS,OACTkC,UAAW,iBACXpC,QAAS,OACTF,gBAAiB,QAEnBuC,MAAO,CACLb,KAAM,EACNxB,QAAS,YACTI,aAAc,OACdkC,OAAQ,iBACRC,QAAS,OACTC,YAAa,QAEfC,QAAS,CACPzC,QAAS,YACTF,gBAAiB,UACjBkB,MAAO,OACPsB,OAAQ,OACRlC,aAAc,OACdc,OAAQ,WAEVwB,OAAQ,CACNlB,KAAM,EACNtB,QAAS,OACT4B,eAAgB,SAChBC,WAAY,SACZf,MAAO,OACPD,SAAU,SAId,EA/QoB4B,KAClB,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KAChCC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAAS,OAC9CG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,KAC1CK,EAAYC,IAAiBN,EAAAA,EAAAA,UAAS,KACtCO,EAAUC,IAAeR,EAAAA,EAAAA,UAAS,IAEnCS,GADOC,EAAAA,EAAAA,MACYD,YACnBE,GAAaC,EAAAA,EAAAA,QAAO,OAE1BC,EAAAA,EAAAA,YAAU,KACcC,WACpB,IAAKL,EAAa,OAClB,MAAMM,GAAaC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,OAAQR,EAAYS,KACzCC,QAAoBC,EAAAA,EAAAA,IAAOL,GACjC,GAAII,EAAYE,SAAU,CACxB,MAAMC,EAAWH,EAAYI,OAC7Bf,EAAYc,EAASf,UAAY,GACnC,GAEFiB,EAAe,GACd,CAACf,KAEJI,EAAAA,EAAAA,YAAU,KAAO,IAADY,EACI,QAAlBA,EAAAd,EAAWe,eAAO,IAAAD,GAAlBA,EAAoBE,eAAe,CAAEC,SAAU,UAAW,GACzD,CAACzB,KAEJU,EAAAA,EAAAA,YAAU,KACR,IAAKJ,EAAa,OAclB,OAbcoB,EAAAA,EAAAA,KACZC,EAAAA,EAAAA,IACEC,EAAAA,EAAAA,IAAWd,EAAAA,GAAI,YACfe,EAAAA,EAAAA,IAAM,aAAc,KAAMvB,EAAYS,OAExCe,IACE,MAAMC,EAAOD,EAAKE,KAAKC,KAAIC,GAAKA,EAAEd,SAC5Be,EAASC,MAAMC,KACnB,IAAIC,IAAIP,EAAKE,KAAIM,GAAK,CAACA,EAAEC,SAAUD,MAAKE,UAE1C7C,EAAWuC,EAAO,GAGV,GACX,CAAC7B,KAEJI,EAAAA,EAAAA,YAAU,KACR,IAAKZ,IAAmBQ,EAAa,OACrC,MAAMoC,GAAIf,EAAAA,EAAAA,IACRC,EAAAA,EAAAA,IAAWd,EAAAA,GAAI,YACfe,EAAAA,EAAAA,IAAM,WAAY,KAAM,CAACvB,EAAYS,IAAKjB,EAAe0C,YACzDX,EAAAA,EAAAA,IAAM,aAAc,KAAM,CAACvB,EAAYS,IAAKjB,EAAe0C,YAC3DG,EAAAA,EAAAA,IAAQ,SACRC,EAAAA,EAAAA,IAAM,KAYR,OAVclB,EAAAA,EAAAA,IAAWgB,GAAGZ,IAC1B,MAAMC,EAAOD,EAAKE,KAAKC,KAAIC,IAAC,CAAOW,GAAIX,EAAEW,MAAOX,EAAEd,WAClDnB,EAAgB8B,GAChBD,EAAKE,KAAKc,SAAQnC,UAChB,MAAM4B,EAAIL,EAAEd,OACRmB,EAAEQ,aAAezC,EAAYS,KAAoB,SAAbwB,EAAES,cAClCC,EAAAA,EAAAA,KAAUpC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,UAAWoB,EAAEW,IAAK,CAAEG,OAAQ,QACtD,GACA,GAEQ,GACX,CAAClD,EAAgBQ,IAEpB,MAAM4C,GAAcC,EAAAA,EAAAA,cAAYxC,UACzBT,EAAWkD,QAAW9C,GAAgBR,UACrCuD,EAAAA,EAAAA,KAAOzB,EAAAA,EAAAA,IAAWd,EAAAA,GAAI,WAAY,CACtC0B,SAAUlC,EAAYS,IACtBgC,WAAYjD,EAAe0C,SAC3Bc,WAAYlD,GAAY,YACxBmD,aAAczD,EAAewD,WAC7BE,QAAStD,EAAWkD,OACpBK,MAAMC,EAAAA,EAAAA,MACNV,OAAQ,SAEV7C,EAAc,IAAG,GAChB,CAACD,EAAYI,EAAaR,EAAgBM,IAI7C,OACEuD,EAAAA,EAAAA,MAAA,OAAKC,MAAOjH,EAAOC,YAAYiH,SAAA,EAC7BC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IAAG,KACVJ,EAAAA,EAAAA,MAAA,OAAKC,MAAOjH,EAAOK,UAAU6G,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,MAAOjH,EAAOY,QAAQsG,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAIF,MAAOjH,EAAOgB,cAAckG,SAAC,UAChClE,EAAQsC,KAAI+B,IACXF,EAAAA,EAAAA,KAAA,OAEEF,MAAO,IACFjH,EAAOqB,QACVnB,iBACgB,OAAdiD,QAAc,IAAdA,OAAc,EAAdA,EAAgB0C,YAAawB,EAAExB,SAAW,UAAY,WAE1DyB,QAASA,IAAMlE,EAAkBiE,GAAGH,SAEnCG,EAAEV,YAREU,EAAExB,gBAabsB,EAAAA,EAAAA,KAAA,OAAKF,MAAOjH,EAAOuB,QAAQ2F,SACxB/D,GACC6D,EAAAA,EAAAA,MAAAO,EAAAA,SAAA,CAAAL,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKC,MAAOjH,EAAOyB,WAAWyF,SAAA,CAAC,cACnBC,EAAAA,EAAAA,KAAA,UAAAD,SAAS/D,EAAewD,iBAEpCK,EAAAA,EAAAA,MAAA,OAAKC,MAAOjH,EAAO2B,SAASuF,SAAA,CACzB7D,EAAaiC,KAAIkC,IAChB,MAAMC,EAAOD,EAAI3B,WAAalC,EAAYS,IAC1C,OACE4C,EAAAA,EAAAA,MAAA,OAEEC,MAAO,IACFjH,EAAO8B,cACV4F,UAAWD,EAAO,WAAa,aAC/BvH,gBAAiBuH,EAAO,UAAY,WACpCP,SAAA,EAEFC,EAAAA,EAAAA,KAAA,KAAGF,MAAOjH,EAAOgC,YAAYkF,SAAEM,EAAIX,WACnCG,EAAAA,EAAAA,MAAA,OAAKC,MAAOjH,EAAOiC,YAAYiF,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,QAAMF,MAAOjH,EAAOoC,SAAS8E,SAAEM,EAAIb,cACnCQ,EAAAA,EAAAA,KAAA,QAAMF,MAAOjH,EAAOqC,SAAS6E,UA5CnCS,EA4C6CH,EAAIV,KA5CzC,OAAFa,QAAE,IAAFA,OAAE,EAAFA,EAAIC,SAASC,mBAAmB,GAAI,CAAEC,KAAM,UAAWC,OAAQ,eA6C9DN,IACCT,EAAAA,EAAAA,MAAA,QAAMC,MAAOjH,EAAOsC,WAAW4E,SAAA,CACb,SAAfM,EAAInB,QAAqB,SACV,cAAfmB,EAAInB,QAA0B,eACf,SAAfmB,EAAInB,SAAqBc,EAAAA,EAAAA,KAAA,QAAMF,MAAO,CAAE7F,MAAO,WAAY8F,SAAC,yBAf9DM,EAAItB,IAlCbyB,KAqDQ,KAGVR,EAAAA,EAAAA,KAAA,OAAKa,IAAKnE,QAEZmD,EAAAA,EAAAA,MAAA,OAAKC,MAAOjH,EAAOuC,UAAU2E,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SACEF,MAAOjH,EAAOyC,MACdwF,YAAY,oBACZC,MAAO3E,EACP4E,SAAUC,GAAK5E,EAAc4E,EAAEC,OAAOH,OACtCI,UAAWF,GAAe,UAAVA,EAAEG,KAAmBhC,OAEvCY,EAAAA,EAAAA,KAAA,UAAQF,MAAOjH,EAAO6C,QAASyE,QAASf,EAAYW,SAAC,gBAMzDC,EAAAA,EAAAA,KAAA,OAAKF,MAAOjH,EAAO8C,OAAOoE,SAAC,2CAI7B,C,mGChKV,MAmQA,EAnQeE,KACb,MAAOoB,EAAaC,IAAkBvF,EAAAA,EAAAA,UAAS,KACxCwF,EAAWC,IAAgBzF,EAAAA,EAAAA,UAAS,KACpC0F,EAASC,IAAc3F,EAAAA,EAAAA,WAAS,IAChC4F,EAAUC,IAAe7F,EAAAA,EAAAA,WAAS,GACnC8F,GAAWC,EAAAA,EAAAA,MAEXC,GADOtF,EAAAA,EAAAA,MACKD,aAElBI,EAAAA,EAAAA,YAAU,KACcC,WACpB,GAAKkF,EACL,IACE,MAAMnD,GAAIf,EAAAA,EAAAA,IACRC,EAAAA,EAAAA,IAAWd,EAAAA,GAAI,YACfe,EAAAA,EAAAA,IAAM,aAAc,KAAMgE,EAAK9E,MAC/B4B,EAAAA,EAAAA,IAAQ,OAAQ,eAEZmD,EAAAA,EAAAA,IAAQpD,EAChB,CAAE,MAAOqD,GACPC,QAAQC,MAAM,2BAA4BF,EAC5C,GAEFG,EAAe,GACd,CAACL,IAkCJ,OACElC,EAAAA,EAAAA,MAAA,OAAKwC,UAAU,SAAQtC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAKwC,UAAU,cAAatC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,WAAUtC,UACvBC,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,cAAatC,SAAC,eAG/BC,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,aAAYtC,UACzBF,EAAAA,EAAAA,MAAA,OAAKwC,UAAU,gBAAetC,SAAA,EAC5BC,EAAAA,EAAAA,KAACsC,EAAAA,IAAQ,CAACD,UAAU,iBACpBrC,EAAAA,EAAAA,KAAA,SACEuC,KAAK,OACLzB,YAAY,YACZC,MAAOM,EACPL,SA9CSnE,UACnB,MAAM2F,EAAQvB,EAAEC,OAAOH,MAGvB,GAFAO,EAAekB,GAEVA,EAAL,CAKAd,GAAW,GACX,IACE,MAAM9C,GAAIf,EAAAA,EAAAA,IACRC,EAAAA,EAAAA,IAAWd,EAAAA,GAAI,cACfe,EAAAA,EAAAA,IAAM,eAAgB,KAAMyE,IAC5BzE,EAAAA,EAAAA,IAAM,eAAgB,KAAMyE,EAAQ,WAEhCxE,QAAagE,EAAAA,EAAAA,IAAQpD,GAC3B4C,EAAaxD,EAAKE,KAAKC,KAAIpB,IAAG,CAAOgC,GAAIhC,EAAIgC,MAAOhC,EAAIO,WAC1D,CAAE,MAAO2E,GACPC,QAAQC,MAAM,4BAA6BF,EAC7C,CAAC,QACCP,GAAW,EACb,CAfA,MAFEF,EAAa,GAiBf,IA0BSH,IACCrB,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,iBAAgBtC,SAC5B0B,GACCzB,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,UAAStC,SAAC,eACvBwB,EAAUkB,OACZlB,EAAUpD,KAAKuE,IACb1C,EAAAA,EAAAA,KAAA,OAEEqC,UAAU,cACVlC,QAASA,KA/B3B0B,EAAS,YA+BqCa,EA/BjB3D,MAC7BuC,EAAe,IACfE,EAAa,SACbI,GAAY,IA4BqC7B,SAE9B2C,EAAEC,cAJED,EAAE3D,OAQXiB,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,aAAYtC,SAAC,6BAOtCC,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,YAAWtC,UACxBF,EAAAA,EAAAA,MAAA,MAAIwC,UAAW,cAAaV,EAAW,SAAW,IAAK5B,SAAA,EACrDC,EAAAA,EAAAA,KAAA,MAAIG,QAASA,KAAQ0B,EAAS,SAAUD,GAAY,EAAM,EAAI7B,SAAC,UAC/DC,EAAAA,EAAAA,KAAA,MAAIG,QAASA,KAAQ0B,EAAS,WAAYD,GAAY,EAAM,EAAI7B,SAAC,YACjEC,EAAAA,EAAAA,KAAA,MAAIG,QAASA,KAAQ0B,EAAS,eAAgBD,GAAY,EAAM,EAAI7B,SAAC,gBACrEF,EAAAA,EAAAA,MAAA,MAAIM,QAASA,KAAQ0B,EAAS,YAAaD,GAAY,EAAM,EAAI7B,SAAA,EAACC,EAAAA,EAAAA,KAAC4C,EAAAA,IAAM,IAAG,eAC5E/C,EAAAA,EAAAA,MAAA,MAAIM,QAASA,KAAQ0B,EAAS,aAAcD,GAAY,EAAM,EAAI7B,SAAA,EAACC,EAAAA,EAAAA,KAAC6C,EAAAA,IAAU,IAAG,gBACjFhD,EAAAA,EAAAA,MAAA,MAAIM,QAASA,KAAQ0B,EAAS,SAAUD,GAAY,EAAM,EAAI7B,SAAA,EAACC,EAAAA,EAAAA,KAAC8C,EAAAA,IAAc,IAAG,iBAIrF9C,EAAAA,EAAAA,KAAA,OAAKqC,UAAU,YAAYlC,QAASA,IAAMyB,GAAYmB,IAASA,IAAMhD,SAClE4B,GAAW3B,EAAAA,EAAAA,KAACgD,EAAAA,IAAO,KAAMhD,EAAAA,EAAAA,KAACiD,EAAAA,IAAM,UAIrCjD,EAAAA,EAAAA,KAAA,SAAAD,SAAQ,y6FAoIS4B,EAAW,OAAS,gNAWjC,C","sources":["pages/MessagePage.js","components/Navbar.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport {\n  collection,\n  query,\n  where,\n  orderBy,\n  onSnapshot,\n  addDoc,\n  updateDoc,\n  doc,\n  serverTimestamp,\n  limit,\n  getDoc,\n} from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { getAuth } from 'firebase/auth';\nimport Navbar from '../components/Navbar'; // âœ… Import Navbar\n\nconst MessagePage = () => {\n  const [senders, setSenders] = useState([]);\n  const [selectedSender, setSelectedSender] = useState(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [fullName, setFullName] = useState('');\n  const auth = getAuth();\n  const currentUser = auth.currentUser;\n  const chatEndRef = useRef(null);\n\n  useEffect(() => {\n    const fetchFullName = async () => {\n      if (!currentUser) return;\n      const userDocRef = doc(db, 'user', currentUser.uid);\n      const userDocSnap = await getDoc(userDocRef);\n      if (userDocSnap.exists()) {\n        const userData = userDocSnap.data();\n        setFullName(userData.fullName || '');\n      }\n    };\n    fetchFullName();\n  }, [currentUser]);\n\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [chatMessages]);\n\n  useEffect(() => {\n    if (!currentUser) return;\n    const unsub = onSnapshot(\n      query(\n        collection(db, 'webchat'),\n        where('receiverId', '==', currentUser.uid)\n      ),\n      snap => {\n        const msgs = snap.docs.map(d => d.data());\n        const unique = Array.from(\n          new Map(msgs.map(m => [m.senderId, m])).values()\n        );\n        setSenders(unique);\n      }\n    );\n    return unsub;\n  }, [currentUser]);\n\n  useEffect(() => {\n    if (!selectedSender || !currentUser) return;\n    const q = query(\n      collection(db, 'webchat'),\n      where('senderId', 'in', [currentUser.uid, selectedSender.senderId]),\n      where('receiverId', 'in', [currentUser.uid, selectedSender.senderId]),\n      orderBy('time'),\n      limit(50)\n    );\n    const unsub = onSnapshot(q, snap => {\n      const msgs = snap.docs.map(d => ({ id: d.id, ...d.data() }));\n      setChatMessages(msgs);\n      snap.docs.forEach(async d => {\n        const m = d.data();\n        if (m.receiverId === currentUser.uid && m.status !== 'seen') {\n          await updateDoc(doc(db, 'webchat', d.id), { status: 'seen' });\n        }\n      });\n    });\n    return unsub;\n  }, [selectedSender, currentUser]);\n\n  const sendMessage = useCallback(async () => {\n    if (!newMessage.trim() || !currentUser || !selectedSender) return;\n    await addDoc(collection(db, 'webchat'), {\n      senderId: currentUser.uid,\n      receiverId: selectedSender.senderId,\n      senderName: fullName || 'Anonymous',\n      receiverName: selectedSender.senderName,\n      message: newMessage.trim(),\n      time: serverTimestamp(),\n      status: 'sent',\n    });\n    setNewMessage('');\n  }, [newMessage, currentUser, selectedSender, fullName]);\n\n  const fmtTime = ts => ts?.toDate().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n\n  return (\n    <div style={styles.pageWrapper}>\n      <Navbar /> {/* âœ… Navbar added here */}\n      <div style={styles.container}>\n        <div style={styles.sidebar}>\n          <h3 style={styles.sidebarHeader}>Chats</h3>\n          {senders.map(s => (\n            <div\n              key={s.senderId}\n              style={{\n                ...styles.contact,\n                backgroundColor:\n                  selectedSender?.senderId === s.senderId ? '#e6f7ff' : '#ffffff',\n              }}\n              onClick={() => setSelectedSender(s)}\n            >\n              {s.senderName}\n            </div>\n          ))}\n        </div>\n\n        <div style={styles.chatbox}>\n          {selectedSender ? (\n            <>\n              <div style={styles.chatHeader}>\n                Chat with <strong>{selectedSender.senderName}</strong>\n              </div>\n              <div style={styles.chatBody}>\n                {chatMessages.map(msg => {\n                  const mine = msg.senderId === currentUser.uid;\n                  return (\n                    <div\n                      key={msg.id}\n                      style={{\n                        ...styles.messageBubble,\n                        alignSelf: mine ? 'flex-end' : 'flex-start',\n                        backgroundColor: mine ? '#dcf8c6' : '#ffffff',\n                      }}\n                    >\n                      <p style={styles.messageText}>{msg.message}</p>\n                      <div style={styles.messageMeta}>\n                        <span style={styles.metaName}>{msg.senderName}</span>\n                        <span style={styles.metaTime}>{fmtTime(msg.time)}</span>\n                        {mine && (\n                          <span style={styles.metaStatus}>\n                            {msg.status === 'sent' && 'âœ“'}\n                            {msg.status === 'delivered' && 'âœ“âœ“'}\n                            {msg.status === 'seen' && <span style={{ color: '#34B7F1' }}>âœ“âœ“</span>}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n                <div ref={chatEndRef} />\n              </div>\n              <div style={styles.chatInput}>\n                <input\n                  style={styles.input}\n                  placeholder=\"Type a message...\"\n                  value={newMessage}\n                  onChange={e => setNewMessage(e.target.value)}\n                  onKeyDown={e => e.key === 'Enter' && sendMessage()}\n                />\n                <button style={styles.sendBtn} onClick={sendMessage}>\n                  Send\n                </button>\n              </div>\n            </>\n          ) : (\n            <div style={styles.noChat}>Select a user to start chatting</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  pageWrapper: {\n    backgroundColor: '#003f66',\n    minHeight: '100vh',\n    padding: '20px',\n  },\n  container: {\n    display: 'flex',\n    height: 'calc(100vh - 40px)',\n    borderRadius: '12px',\n    overflow: 'hidden',\n    boxShadow: '0 4px 12px rgba(0,0,0,0.1)',\n    backgroundColor: '#ffffff',\n    marginTop: '60px', // To avoid overlap with fixed Navbar (if it's fixed)\n  },\n  sidebar: {\n    width: '30%',\n    borderRight: '1px solid #ddd',\n    backgroundColor: '#f9f9f9',\n    overflowY: 'auto',\n  },\n  sidebarHeader: {\n    margin: 0,\n    padding: '16px',\n    borderBottom: '1px solid #ddd',\n    fontSize: '18px',\n    backgroundColor: '#e6f7ff',\n    color: '#003f66',\n  },\n  contact: {\n    padding: '12px 16px',\n    cursor: 'pointer',\n    borderBottom: '1px solid #eee',\n    color: '#003f66',\n  },\n  chatbox: {\n    width: '70%',\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#fafafa',\n  },\n  chatHeader: {\n    padding: '16px',\n    backgroundColor: '#e6f7ff',\n    borderBottom: '1px solid #ddd',\n    color: '#003f66',\n    fontWeight: '600',\n  },\n  chatBody: {\n    flex: 1,\n    padding: '16px',\n    overflowY: 'auto',\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '12px',\n  },\n  messageBubble: {\n    maxWidth: '60%',\n    padding: '12px',\n    borderRadius: '12px',\n    boxShadow: '0 1px 2px rgba(0,0,0,0.1)',\n  },\n  messageText: {\n    margin: 0,\n    color: '#333',\n  },\n  messageMeta: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    gap: '8px',\n    marginTop: '6px',\n    fontSize: '12px',\n    color: '#555',\n  },\n  metaName: { fontWeight: '500' },\n  metaTime: {},\n  metaStatus: { fontSize: '14px' },\n  chatInput: {\n    display: 'flex',\n    borderTop: '1px solid #ddd',\n    padding: '12px',\n    backgroundColor: '#fff',\n  },\n  input: {\n    flex: 1,\n    padding: '10px 14px',\n    borderRadius: '20px',\n    border: '1px solid #ccc',\n    outline: 'none',\n    marginRight: '12px',\n  },\n  sendBtn: {\n    padding: '10px 18px',\n    backgroundColor: '#25D366',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '20px',\n    cursor: 'pointer',\n  },\n  noChat: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    color: '#777',\n    fontSize: '16px',\n  },\n};\n\nexport default MessagePage;\n","// src/components/Navbar.js\nimport React, { useState, useEffect } from 'react';\nimport {\n  FaBars,\n  FaTimes,\n  FaSearch,\n  FaShoppingCart,\n  FaUser,\n  FaEnvelope\n} from 'react-icons/fa';\nimport { useNavigate } from 'react-router-dom';\nimport { db } from '../firebase';\nimport { collection, query, where, getDocs, orderBy } from 'firebase/firestore';\nimport { getAuth } from 'firebase/auth';\n\nconst Navbar = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [companies, setCompanies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [menuOpen, setMenuOpen] = useState(false);\n  const navigate = useNavigate();\n  const auth = getAuth();\n  const user = auth.currentUser;\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      if (!user) return;\n      try {\n        const q = query(\n          collection(db, 'webchat'),\n          where('receiverId', '==', user.uid),\n          orderBy('time', 'desc')\n        );\n        await getDocs(q); // Not used for display in navbar currently\n      } catch (err) {\n        console.error('Error fetching messages:', err);\n      }\n    };\n    fetchMessages();\n  }, [user]);\n\n  const handleSearch = async (e) => {\n    const qText = e.target.value;\n    setSearchQuery(qText);\n\n    if (!qText) {\n      setCompanies([]);\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const q = query(\n        collection(db, 'postorder'),\n        where('businessname', '>=', qText),\n        where('businessname', '<=', qText + '\\uf8ff')\n      );\n      const snap = await getDocs(q);\n      setCompanies(snap.docs.map(doc => ({ id: doc.id, ...doc.data() })));\n    } catch (err) {\n      console.error('Error fetching companies:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSelect = (company) => {\n    navigate(`/company/${company.id}`);\n    setSearchQuery('');\n    setCompanies([]);\n    setMenuOpen(false);\n  };\n\n  return (\n    <nav className=\"navbar\">\n      <div className=\"navbar-main\">\n        <div className=\"nav-left\">\n          <div className=\"navbar-logo\">PlanOra</div>\n        </div>\n\n        <div className=\"nav-center\">\n          <div className=\"navbar-search\">\n            <FaSearch className=\"search-icon\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={searchQuery}\n              onChange={handleSearch}\n            />\n            {searchQuery && (\n              <div className=\"search-results\">\n                {loading ? (\n                  <div className=\"loading\">Loading...</div>\n                ) : companies.length ? (\n                  companies.map((c) => (\n                    <div\n                      key={c.id}\n                      className=\"result-item\"\n                      onClick={() => handleSelect(c)}\n                    >\n                      {c.businessname}\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"no-results\">No matches found</div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"nav-right\">\n          <ul className={`nav-links ${menuOpen ? 'active' : ''}`}>\n            <li onClick={() => { navigate('/home'); setMenuOpen(false); }}>Home</li>\n            <li onClick={() => { navigate('/orders'); setMenuOpen(false); }}>Orders</li>\n            <li onClick={() => { navigate('/post-order'); setMenuOpen(false); }}>Post Order</li>\n            <li onClick={() => { navigate('/profile'); setMenuOpen(false); }}><FaUser /> Profile</li>\n            <li onClick={() => { navigate('/messages'); setMenuOpen(false); }}><FaEnvelope /> Messages</li>\n            <li onClick={() => { navigate('/cart'); setMenuOpen(false); }}><FaShoppingCart /> Cart</li>\n          </ul>\n        </div>\n\n        <div className=\"hamburger\" onClick={() => setMenuOpen(prev => !prev)}>\n          {menuOpen ? <FaTimes /> : <FaBars />}\n        </div>\n      </div>\n\n      <style>{`\n        * {\n          box-sizing: border-box;\n          margin: 0;\n          padding: 0;\n        }\n        .navbar {\n          background: #003f66;\n          color: #fff;\n          padding: 0.5rem 1rem;\n          position: sticky;\n          top: 0;\n          z-index: 1000;\n        }\n        .navbar-main {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          flex-wrap: wrap;\n        }\n\n        .nav-left {\n          flex: 1;\n        }\n\n        .nav-center {\n          flex: 2;\n          display: flex;\n          justify-content: center;\n        }\n\n        .nav-right {\n          flex: 2;\n          display: flex;\n          justify-content: flex-end;\n        }\n\n        .navbar-logo {\n          font-size: 1.5rem;\n          font-weight: bold;\n        }\n\n        .navbar-search {\n          position: relative;\n          width: 100%;\n          max-width: 400px;\n          background: rgba(255,255,255,0.2);\n          border-radius: 20px;\n          display: flex;\n          align-items: center;\n          padding: 0.3rem 0.75rem;\n        }\n\n        .navbar-search input {\n          flex: 1;\n          background: transparent;\n          border: none;\n          color: #fff;\n          margin-left: 0.5rem;\n          font-size: 0.9rem;\n          outline: none;\n        }\n\n        .search-icon {\n          color: #ddd;\n        }\n\n        .search-results {\n          position: absolute;\n          top: 110%;\n          left: 0;\n          width: 100%;\n          background: #fff;\n          color: #333;\n          border-radius: 0 0 10px 10px;\n          box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n          max-height: 200px;\n          overflow-y: auto;\n          z-index: 1001;\n        }\n\n        .result-item, .loading, .no-results {\n          padding: 0.5rem;\n          border-bottom: 1px solid #eee;\n          cursor: pointer;\n        }\n\n        .result-item:hover {\n          background: #f0f0f0;\n        }\n\n        .hamburger {\n          display: none;\n          font-size: 1.5rem;\n          color: #fff;\n          cursor: pointer;\n        }\n\n        .nav-links {\n          list-style: none;\n          display: flex;\n          gap: 1.5rem;\n          align-items: center;\n        }\n\n        .nav-links li {\n          cursor: pointer;\n          padding: 0.5rem;\n          border-radius: 6px;\n          transition: background 0.2s;\n          display: flex;\n          align-items: center;\n          gap: 0.3rem;\n        }\n\n        .nav-links li:hover {\n          background: rgba(255, 255, 255, 0.2);\n        }\n\n        @media (max-width: 768px) {\n          .nav-center {\n            order: 3;\n            width: 100%;\n            margin-top: 10px;\n          }\n\n          .nav-right {\n            width: 100%;\n            justify-content: center;\n          }\n\n          .nav-links {\n            display: ${menuOpen ? 'flex' : 'none'};\n            flex-direction: column;\n            width: 100%;\n            margin-top: 1rem;\n          }\n\n          .hamburger {\n            display: block;\n          }\n        }\n      `}</style>\n    </nav>\n  );\n};\n\nexport default Navbar;\n"],"names":["styles","pageWrapper","backgroundColor","minHeight","padding","container","display","height","borderRadius","overflow","boxShadow","marginTop","sidebar","width","borderRight","overflowY","sidebarHeader","margin","borderBottom","fontSize","color","contact","cursor","chatbox","flexDirection","chatHeader","fontWeight","chatBody","flex","gap","messageBubble","maxWidth","messageText","messageMeta","justifyContent","alignItems","metaName","metaTime","metaStatus","chatInput","borderTop","input","border","outline","marginRight","sendBtn","noChat","MessagePage","senders","setSenders","useState","selectedSender","setSelectedSender","chatMessages","setChatMessages","newMessage","setNewMessage","fullName","setFullName","currentUser","getAuth","chatEndRef","useRef","useEffect","async","userDocRef","doc","db","uid","userDocSnap","getDoc","exists","userData","data","fetchFullName","_chatEndRef$current","current","scrollIntoView","behavior","onSnapshot","query","collection","where","snap","msgs","docs","map","d","unique","Array","from","Map","m","senderId","values","q","orderBy","limit","id","forEach","receiverId","status","updateDoc","sendMessage","useCallback","trim","addDoc","senderName","receiverName","message","time","serverTimestamp","_jsxs","style","children","_jsx","Navbar","s","onClick","_Fragment","msg","mine","alignSelf","ts","toDate","toLocaleTimeString","hour","minute","ref","placeholder","value","onChange","e","target","onKeyDown","key","searchQuery","setSearchQuery","companies","setCompanies","loading","setLoading","menuOpen","setMenuOpen","navigate","useNavigate","user","getDocs","err","console","error","fetchMessages","className","FaSearch","type","qText","length","c","businessname","FaUser","FaEnvelope","FaShoppingCart","prev","FaTimes","FaBars"],"sourceRoot":""}